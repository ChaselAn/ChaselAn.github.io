<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[IP、子网掩码、缺省网关/默认网关、DNS、服务器、端口的总结(转)]]></title>
      <url>http://chaselan.com/blog/2016/05/04/netknowledge.html</url>
      <content type="html"><![CDATA[<ul>
<li>转载自简书，作者：BW开发者</li>
<li>原文链接：<a href="http://www.jianshu.com/p/d05f611b2d08#" target="_blank" rel="external">IP、子网掩码、缺省网关/默认网关、DNS、服务器、端口的总结</a></li>
</ul>
<h3 id="网络的基本概念"><a href="#网络的基本概念" class="headerlink" title="网络的基本概念"></a>网络的基本概念</h3><ul>
<li>客户端:应用 C/S（客户端/服务器） B/S（浏览器/服务器）</li>
<li>服务器：为客户端提供服务、数据、资源的机器</li>
<li>请求：客户端向服务器索取数据</li>
<li>响应：服务器对客户端请求作出反应，一般是返回给客户端数据</li>
</ul>
<a id="more"></a>
<p><img src="http://7xte1z.com2.z0.glb.clouddn.com/%E7%BD%91%E7%BB%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png" alt=""></p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><ul>
<li>Uniform Resource Locator（统一资源定位符）</li>
<li>网络中每一个资源都对应唯一的地址——URL</li>
</ul>
<h3 id="IP、子网掩码、路由器、DNS"><a href="#IP、子网掩码、路由器、DNS" class="headerlink" title="IP、子网掩码、路由器、DNS"></a>IP、子网掩码、路由器、DNS</h3><p><img src="http://7xte1z.com2.z0.glb.clouddn.com/IP%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E8%B7%AF%E7%94%B1%E5%99%A8DNS.png" alt=""></p>
<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul>
<li>IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址（每个机器都有一个编码，如MAC上就有一个叫MAC地址的东西）的差异。是32位二进制数据，通常以十进制表示，并以“.”分隔。IP地址是一种逻辑地地址，用来标识网络中一个个主机，在本地局域网上是惟一的。</li>
</ul>
<p><img src="http://7xte1z.com2.z0.glb.clouddn.com/IP%E5%9C%B0%E5%9D%80.png" alt=""></p>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><ul>
<li>IP（网络之间互连的协议）它是能使连接到网上的所有计算机网络实现相互通信的一套规则，规定了计算机在因特网上进行通信时应当遵守的规则。任何厂家生产的计算机系统，只要遵守IP协议就可以与因特网互连互通。IP地址有唯一性，即每台机器的IP地址在全世界是唯一的。这里指的是网络上的真实IP它是通过本机IP地址和子网掩码的”与”运算然后再通过各种处理算出来的（要遵守TCP协议还要加报文及端口什么的，我没有细追究，现在还用不上，反正暂时知道被处理过的就行了），顺便教大家查自己真实IP的方法：</li>
</ul>
<p><img src="http://7xte1z.com2.z0.glb.clouddn.com/IP.png" alt=""></p>
<h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><ul>
<li><p>要想理解什么是子网掩码，就不能不了解IP地址的构成。互联网是由许多小型网络构成的，每个网络上都有许多主机，这样便构成了一个有层次的结构。IP地址在设计时就考虑到地址分配的层次特点，将每个IP地址都分割成网络号和主机号两部分，以便于IP地址的寻址操作。</p>
</li>
<li><p>IP地址的网络号和主机号各是多少位呢？如果不指定，就不知道哪些位是网络号、哪些是主机号，这就需要通过子网掩码来实现。什么是子网掩码子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分子网掩码的设定必须遵循一定的规则。与IP地址相同，子网掩码的长度也是32位，左边是网络位，用二进制数字“1”表示；右边是主机位，用二进制数字“0”表示。假设IP地址为“192.168.1.1”子网掩码为“255.255.255.0”。其中，“1”有24个，代表与此相对应的IP地址左边24位是网络号；“0”有8个，代表与此相对应的IP地址右边8位是主机号。这样，子网掩码就确定了一个IP地址的32位二进制数字中哪些是网络号、哪些是主机号。这对于采用TCP/IP协议的网络来说非常重要，只有通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作。</p>
</li>
<li><p>常用的子网掩码有数百种，这里只介绍最常用的两种子网掩码。</p>
<ul>
<li>子网掩码是“255.255.255.0”的网络：<br>最后面一个数字可以在0~255范围内任意变化，因此可以提供256个IP地址。但是实际可用的IP地址数量是256-2，即254个，因为主机号不能全是“0”或全是“1”。</li>
<li>子网掩码是“255.255.0.0”的网络：<br>后面两个数字可以在0~255范围内任意变化，可以提供255²个IP地址。但是实际可用的IP地址数量是255²-2，即65023个。</li>
</ul>
</li>
<li><p>IP地址的子网掩码设置不是任意的。如果将子网掩码设置过大，也就是说子网范围扩大，那么，根据子网寻径规则，很可能发往和本地主机不在同一子网内的目标主机的数据，会因为错误的判断而认为目标主机是在同一子网内，那么，数据包将在本子网内循环，直到超时并抛弃，使数据不能正确到达目标主机，导致网络传输错误；如果将子网掩码设置得过小，那么就会将本来属于同一子网内的机器之间的通信当做是跨子网传输，数据包都交给缺省网关处理，这样势必增加缺省网关(文章下方有解释)的负担，造成网络效率下降。因此，子网掩码应该根据网络的规模进行设置。如果一个网络的规模不超过254台电脑，采用“255.255.255.0”作为子网掩码就可以了，现在大多数局域网都不会超过这个数字，因此“255.255.255.0”是最常用的IP地址子网掩码；假如在一所大学具有1500多台电脑，这种规模的局域网可以使用“255.255.0.0”。</p>
</li>
</ul>
<h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><ul>
<li>网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1~192. 168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1~192. 168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目标主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机。网络B向网络A转发数据包的过程也是如此 所以说，只有设置好网关的IP地址，TCP/IP协议才能实现不同网络之间的相互通信。那么这个IP地址是哪台机器的IP地址呢？网关的IP地址是具有路由功能的设备的IP地址，具有路由功能的设备有路由器、启用了路由协议的服务器（实质上相当于一台路由器）、代理服务器（也相当于一台路由器）。</li>
</ul>
<h3 id="路由器（Windows下叫默认网关，网关就是路由，路由就是网关不要蒙）"><a href="#路由器（Windows下叫默认网关，网关就是路由，路由就是网关不要蒙）" class="headerlink" title="路由器（Windows下叫默认网关，网关就是路由，路由就是网关不要蒙）"></a>路由器（Windows下叫默认网关，网关就是路由，路由就是网关不要蒙）</h3><ul>
<li>如果搞清了什么是网关，默认网关也就好理解了。就好像一个房间可以有多扇门一样，一台主机可以有多个网关。默认网关的意思是一台主机如果找不到可用的网关，就把数据包发给默认指定的网关，由这个网关来处理数据包。现在主机使用的网关，一般指的是默认网关。</li>
<li>下方是百度百科给出的解释</li>
</ul>
<p><img src="http://7xte1z.com2.z0.glb.clouddn.com/%E8%B7%AF%E7%94%B1%E5%99%A8%28%29.png" alt=""></p>
<ul>
<li><p>如何设置默认网关　一台电脑的默认网关是不可以随随便便指定的，必须正确地指定，否则一台电脑就会将数据包发给不是网关的电脑，从而无法与其他网络的电脑通信。默认网关的设定有手动设置和自动设置两种方式。</p>
<ul>
<li>手动设置：手动设置适用于电脑数量比较少、TCP/IP参数基本不变的情况，比如只有几台到十几台电脑。因为这种方法需要在联入网络的每台电脑上设置“默认网关”，非常费劲，一旦因为迁移等原因导致必须修改默认网关的IP地址，就会给网管带来很大的麻烦，所以不推荐使用。需要特别注意的是：默认网关必须是电脑自己所在的网段中的IP地址，而不能填写其他网段中的IP地址。</li>
<li>自动设置：自动设置就是利用DHCP服务器来自动给网络中的电脑分配IP地址、子网掩码和默认网关。这样做的好处是一旦网络的默认网关发生了变化时，只要更改了DHCP服务器中默认网关的设置，那么网络中所有的电脑均获得了新的默认网关的IP地址。这种方法适用于网络规模较大、TCP/IP参数有可能变动的网络。另外一种自动获得网关的办法是通过安装代理服务器软件（如MS Proxy）的客户端程序来自动获得，其原理和方法和DHCP有相似之处。由于篇幅所限，就不再详述了。</li>
</ul>
</li>
</ul>
<h3 id="缺省网关"><a href="#缺省网关" class="headerlink" title="缺省网关"></a>缺省网关</h3><ul>
<li>缺省网关（Default Gateway）是计算机网络中一个如何将数据包转发到其他网络中的节点。在一个典型的TCP / IP网络，节点（如服务器、工作站和网络设备）都有一个定义的默认路由设置（指向默认网关）。可以在没有特定路由的情况下，明确出发送数据包的下一跳IP地址。<br>下方是百度百科给出的解释：<br><img src="http://7xte1z.com2.z0.glb.clouddn.com/%E7%BC%BA%E7%9C%81%E7%BD%91%E5%85%B3.png" alt=""></li>
<li>可以看出缺省网关就是默认网关，那么有人会说既然有一样为什么又凭空多出来一个缺省网关，我的理解是这样的，应该说默认网关是缺省网关的一个子集。缺省网关有一个定义的默认路由设置（指向默认网关），缺省网关就相当于一个代理服务器暂时管理发送的数据包，当发送到目标主机时先由目标主机的缺省网关接收再找到对应的默认网关，就相当于缺省网关是父类，默认网关是子类~~</li>
</ul>
<h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><ul>
<li>域名服务器(Domain Name Server)。在Internet上域名与IP地址之间是一一对应的，域名虽然便于人们记忆，但机器之间只能互相认识IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS就是进行域名解析的服务器 。</li>
</ul>
<h3 id="DHCP服务器"><a href="#DHCP服务器" class="headerlink" title="DHCP服务器"></a>DHCP服务器</h3><ul>
<li>DHCP指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。提升地址的使用率。</li>
</ul>
<h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><ul>
<li>MAC地址就如同我们身份证上的身份证号码，具有全球唯一性。(知道这个就行了，不用往下看了)</li>
<li><p>MAC（Media Access Control，介质访问控制）地址</p>
<ul>
<li>前24位叫做组织唯一标志符（Organizationally Unique Identifier，即OUI），是由IEEE的注册管理机构给不同厂家分配的代码，区分了不同的厂家。</li>
<li>后24位是由厂家自己分配的，称为扩展标识符。同一个厂家生产的网卡中MAC地址后24位是不同的。<br>网卡的物理地址通常是由网卡生产厂家烧入网卡的EPROM（一种闪存芯片，通常可以通过程序擦写），它存储的是传输数据时真正赖以标识发出数据的电脑和接收数据的主机的地址。</li>
</ul>
</li>
<li><p>也就是说，在网络底层的物理传输过程中，是通过物理地址来识别主机的，它一定是全球唯一的。比如，著名的以太网卡，其物理地址是48bit（比特位）的整数，如：44-45-53-54-00-00,以机器可读的方式存入主机接口中。以太网地址管理机构(除了管这个外还管别的)（IEEE）（IEEE：电气和电子工程师协会）将以太网地址，也就是48比特的不同组合，分为若干独立的连续地址组，生产以太网网卡的厂家就购买其中一组，具体生产时，逐个将唯一地址赋予以太网卡。</p>
</li>
<li><p>在一个稳定的网络中，IP地址和MAC地址是成对出现的。如果一台计算机要和网络中另一外计算机通信，那么要配置这两台计算机的IP地址，MAC地址是网卡出厂时设定的，这样配置的IP地址就和MAC地址形成了一种对应关系。在数据通信时，IP地址负责表示计算机的网络层地址，网络层设备（如路由器）根据IP地址来进行操作；MAC地址负责表示计算机的数据链路层地址，数据链路层设备（如交换机）根据MAC地址来进行操作。IP和MAC地址这种映射关系由ARP（Address Resolution Protocol，地址解析协议）协议完成。</p>
</li>
</ul>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><ul>
<li>服务器的分类<br>按照软件开发阶段来分，服务器可以大致分为2种<ul>
<li>（1）远程服务器<br>别名：外网服务器、正式服务器<br>使用阶段：应用上线后使用的服务器<br>使用人群：供全体用户使用<br>速度：服务器的性能、用户的网速</li>
<li>（2）本地服务器<br>别名：内网服务器、测试服务器<br>使用阶段：应用处于开发、测试阶段使用的服务器<br>使用人群：仅供公司内部的开发人员、测试人员使用<br>速度：由于是局域网，所以速度飞快，有助于提高开发测试效率</li>
</ul>
</li>
<li>本地服务器的选择<br>远程服务器就是本地内网服务器开放外网访问而已<br>如果处于学习、开发阶段，自己搭建一个本地服务器即可</li>
</ul>
<h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ul>
<li><p>端口包括物理端口和逻辑端口。物理端口是用于连接物理设备之间的接口，逻辑端口是逻辑上用于区分服务的端口。TCP/IP协议中的端口就是逻辑端口，通过不同的逻辑端口来区分不同的服务。<br>端口有什么用呢？我们知道，一台拥有IP地址的主机可以提供许多服务，比如Web服务、FTP服务、SMTP服务等，这些服务完全可以通过1个IP地址来实现。那么，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP 地址与网络服务的关系是一对多的关系。实际上是通过“IP地址+端口号”来区 分不同的服务的。</p>
<ul>
<li>公认端口（Well-Known Ports）<br>这类端口也常称之为”常用端口”。这类端口的端口号从0到1023，它们紧密绑定于一些特定的服务。通常这些端口的通信明确表明了某种服务的协议，这种端口是不可再重新定义它的作用对象。80端口实际上总是HTTP通信所使用的，而23号端口则是Telnet服务专用的。</li>
<li>注册端口（Registered Ports）<br>端口号从1025到49151。分配给用户进程或应用程序。这些进程主要是用户选择安装的一些应用程序，而不是分配好的公认端口的常用程序。<br>*动态和/或私有端口（Dynamic and/or Private Ports）<br>之所以称为动态端口，因为它一般不固定分配某种服务，而是动态分配。</li>
</ul>
</li>
</ul>
<p>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记录一些开发中的小技巧（持续更新中）]]></title>
      <url>http://chaselan.com/blog/2016/03/20/recordskill.html</url>
      <content type="html"><![CDATA[<h3 id="系统默认的动画时间"><a href="#系统默认的动画时间" class="headerlink" title="系统默认的动画时间"></a>系统默认的动画时间</h3><ul>
<li>系统默认的动画时间是0.25秒，如果开发中，动画没有明确需求，并且不知道用多少秒合适的时候就可以用0.25秒</li>
</ul>
<a id="more"></a>
<h3 id="对约束修改增加动画"><a href="#对约束修改增加动画" class="headerlink" title="对约束修改增加动画"></a>对约束修改增加动画</h3><ul>
<li>默认情况下，我们修改了在修改约束的地方增加动画，是没有动画效果的，代码如下面所示</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.25</span>) &#123;</span><br><span class="line">	rightConstraint.constant = cancelBtn.bounds.width</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>我们需要调用layoutIfNeeded()方法</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.25</span>) &#123;</span><br><span class="line">	<span class="comment">//修改约束这一句也可以放在animate外面</span></span><br><span class="line">	rightConstraint.constant = cancelBtn.bounds.width</span><br><span class="line">	<span class="keyword">self</span>.layoutIfNeeded()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置UITabBarItem的颜色"><a href="#设置UITabBarItem的颜色" class="headerlink" title="设置UITabBarItem的颜色"></a>设置UITabBarItem的颜色</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tabBar.tintColor = <span class="type">UIColor</span>.orangeColor()</span><br></pre></td></tr></table></figure>
<ul>
<li>这一句可以将item的图片和文字都变成橙色</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vc.tabBarItem.setTitleTextAttributes([<span class="type">NSForegroundColorAttributeName</span>:<span class="type">UIColor</span>.orangeColor()], forState: .<span class="type">Selected</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>只有标题文字会变成橙色</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vc.tabBarItem.selectedImage = <span class="type">UIImage</span>(named: imageName + <span class="string">"_selected"</span>)?.imageWithRenderingMode(.<span class="type">AlwaysOriginal</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>通过设置图片的RenderingMode可以把图片设成原来的颜色（不设是系统的蓝色）</li>
</ul>
<h3 id="自定义UITabBar"><a href="#自定义UITabBar" class="headerlink" title="自定义UITabBar"></a>自定义UITabBar</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myTabBar = <span class="type">NBMainTabBar</span>()</span><br><span class="line"><span class="comment">//    print(tabBar.classForCoder)</span></span><br><span class="line">setValue(myTabBar, forKey: <span class="string">"tabBar"</span>)</span><br><span class="line"><span class="comment">//    print(tabBar.classForCoder)</span></span><br></pre></td></tr></table></figure>
<h3 id="设置tabBar中的偏移"><a href="#设置tabBar中的偏移" class="headerlink" title="设置tabBar中的偏移"></a>设置tabBar中的偏移</h3><ul>
<li>设置文字偏移用<code>titlepositionadjust</code></li>
<li>设置图片偏移用<code>imageInset</code></li>
</ul>
<h3 id="自定义返回按钮导致侧滑手势失效的解决"><a href="#自定义返回按钮导致侧滑手势失效的解决" class="headerlink" title="自定义返回按钮导致侧滑手势失效的解决"></a>自定义返回按钮导致侧滑手势失效的解决</h3><ul>
<li>自定义navigationBar中的返回按钮导致系统自带的侧滑手势失效</li>
<li>解决方法如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACBaseNavViewController</span>: <span class="title">UINavigationController</span>,<span class="title">UIGestureRecognizerDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.interactivePopGestureRecognizer?.delegate = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gestureRecognizerShouldBegin</span><span class="params">(gestureRecognizer: UIGestureRecognizer)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> childViewControllers.<span class="built_in">count</span> &gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过终端计算项目的代码量"><a href="#通过终端计算项目的代码量" class="headerlink" title="通过终端计算项目的代码量"></a>通过终端计算项目的代码量</h3><p><img src="http://7xte1z.com1.z0.glb.clouddn.com/%E8%AE%A1%E7%AE%97%E4%BB%A3%E7%A0%81%E9%87%8F.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[本博客的搭建详解]]></title>
      <url>http://chaselan.com/blog/2016/02/12/blogbuild.html</url>
      <content type="html"><![CDATA[<p>此文记录本博客的搭建过程。本博客的搭建主要参考cnfeat大神的<a href="http://www.jianshu.com/p/05289a4bc8b2/" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a>。<br>此博客采用的是Github Pages+Hexo搭建，至于什么是Github Pages和Hexo,以及这两个的优缺点我就在这不多说了，请各位看官自行百度，那儿的解释比较专业。话不多说，开始搭建。<br><a id="more"></a><br>注意：本文写的是MAC系统下的搭建过程，Windows系统的请自行百度。</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>首先你需要有一个github的账号。访问:<a href="https://github.com" target="_blank" rel="external">http://www.github.com/</a>进行注册。</p>
<h3 id="配置和使用Github"><a href="#配置和使用Github" class="headerlink" title="配置和使用Github"></a>配置和使用Github</h3><p>请参考<a href="http://www.cnblogs.com/heyonggang/p/3462191.html" target="_blank" rel="external">mac下使用github</a>。</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><h3 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h3><p>首先需要先安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>和git。<br>git可以通过<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">brew</a>来安装。<br>安装完brew后，打开终端执行命令安装git：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></p>
<p>git和node.js安装完成后，打开终端，输入命令行安装hexo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p>
<p>如果安装失败，执行以下命令，换个源进行安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure></p>
<p>在Finder中的小房子的图标中，建立一个名字叫”hexo”的文件夹。（如果finder中边栏里没有小房子图标，请在finder中的偏好设置里边栏中勾选中小房子。）<br>执行以下命令，进入到hexo的文件目录中，进行初始化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/小房子的名称/hexo</span><br><span class="line">$ sudo hexo init</span><br></pre></td></tr></table></figure></p>
<p>Hexo随后会自动在目标文件夹建立网站所需要的所有文件。<br>现在我们已经搭建起本地的hexo博客了，执行以下命令，然后到浏览器输入localhost:4000可以看到hexo的界面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hexo g</span><br><span class="line">$ sudo hexo s</span><br></pre></td></tr></table></figure></p>
<p>按下control + c可以退出。</p>
<h3 id="复制主题"><a href="#复制主题" class="headerlink" title="复制主题"></a>复制主题</h3><p>建立了Hexo文件之后就可以复制我们所需要的主题了。<br>本博客使用的是比较火的next主题。更多的主题可以在<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">有哪些好看的 Hexo 主题</a>中寻找适合自己的主题。<br>执行命令复制主题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<h3 id="启用next主题"><a href="#启用next主题" class="headerlink" title="启用next主题"></a>启用next主题</h3><p>在finder中进入hexo文件，打开_config.yml文件（可以使用xcode进行编辑），找到theme：landscape,将landscape替换成next，如果文件被锁定修改不了，请右键点击_config.yml文件，选择显示简介，将权限修改成读与写。<br><img src="http://7xte1z.com1.z0.glb.clouddn.com/Snip20160426_7.png" alt="xiugaitheme icon"><br>修改之后，执行以下命令来更新主题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure></p>
<h3 id="查看搭建效果"><a href="#查看搭建效果" class="headerlink" title="查看搭建效果"></a>查看搭建效果</h3><p>回到hexo目录，执行命令行查看搭建效果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/小房子名称/hexo</span><br><span class="line">$ sudo hexo g</span><br><span class="line">$ sudo hexo s</span><br></pre></td></tr></table></figure></p>
<p>执行命令后，到浏览器输入localhost:4000就可以看到我们的主题效果了。</p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>如果已有域名，可跳过这一步。<br>推荐去<a href="https://sg.godaddy.com/zh/offers/default.aspx?tmskey=1dom_23&amp;isc=bsfndom4&amp;cvosrc=ppc.baidu&amp;currencytype=CNY&amp;ef_id=Vxx1xgAABR8c4vcQ:20160426000818:s" target="_blank" rel="external">godaddy</a>上购买，安全，可用支付宝。<br>搜索到想要的域名，然后选择购买年限，进行购买。</p>
<h3 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h3><p>我用的是cnfeat大神推荐的<a href="https://www.dnspod.cn" target="_blank" rel="external">DNSPod</a><br>进入后注册一个账号，进入域名解析,添加域名<br><img src="http://7xte1z.com1.z0.glb.clouddn.com/Snip20160426_2.png" alt="yumingjiexi icon"><br>添加完成后，点击添加的域名，进入添加记录界面，进行如下的配置<br><img src="http://7xte1z.com1.z0.glb.clouddn.com/Snip20160426_3.png" alt="tianjiajilu icon"><br>其中A的两条记录指向的ip地址是github Pages的提供的ip</p>
<ul>
<li>192.30.252.153</li>
<li>192.30.252.154</li>
</ul>
<p>如博客不能登录，有可能是github更改了空间服务的ip地址，记得及时到在GitHub Pages查看最新的ip即可<br>www指定的记录是你在github注册的仓库。</p>
<h3 id="去Godaddy修改DNS地址"><a href="#去Godaddy修改DNS地址" class="headerlink" title="去Godaddy修改DNS地址"></a>去Godaddy修改DNS地址</h3><p>进入Godaddy，登录你的用户名，在我的域名中，管理DNS<br><img src="http://7xte1z.com1.z0.glb.clouddn.com/Snip20160426_5.png" alt="guanliDNS icon"><br>在域名服务器中配置我们的DNS地址，地址就是之前添加记录时的记录类型为NS的两条记录内容。<br><img src="http://7xte1z.com1.z0.glb.clouddn.com/Snip20160426_6.png" alt="peizhiDNS icon"></p>
<h3 id="将独立域名与GitHub-Pages的空间绑定"><a href="#将独立域名与GitHub-Pages的空间绑定" class="headerlink" title="将独立域名与GitHub Pages的空间绑定"></a>将独立域名与GitHub Pages的空间绑定</h3><p>到我的github仓库，点击右下角的「Download ZIP」，下载源文件，解压，找到CNAME文件，用记事本打开，将chaselan.com修改成你的域名，放进hexo\source目录下</p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><h3 id="部署到Github中"><a href="#部署到Github中" class="headerlink" title="部署到Github中"></a>部署到Github中</h3><p>打开finder，进入到hexo文件中，打开_config文件，修改Deployment配置<br><img src="http://7xte1z.com1.z0.glb.clouddn.com/Snip20160426_8.png" alt="xiugaideployment icon"><br>打开终端执行命令，跳转到hexo文件夹中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/小房子的名称/hexo</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo clean</span><br><span class="line">$ sudo hexo g</span><br><span class="line">$ sudo hexo d</span><br></pre></td></tr></table></figure></p>
<p>现在为止，部署就成功了，在浏览器中输入你的域名，就可以查看你的博客了</p>
<h2 id="next主题的相关配置"><a href="#next主题的相关配置" class="headerlink" title="next主题的相关配置"></a>next主题的相关配置</h2><p>请参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">next的使用帮助</a></p>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记录定位与地图相关]]></title>
      <url>http://chaselan.com/blog/2016/01/15/map.html</url>
      <content type="html"><![CDATA[<ul>
<li>地图与定位用的不是特别多，为了防止忘记，记录一下相关的知识及其代码，以及iOS9之后的一些更新。</li>
</ul>
<a id="more"></a>
<h2 id="一次定位"><a href="#一次定位" class="headerlink" title="一次定位"></a>一次定位</h2><ul>
<li>在某些需求中，只需要应用定位一次就不再定位。持续定位会非常耗电</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 位置管理者对象</span></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> manager: <span class="type">CLLocationManager</span> = <span class="type">CLLocationManager</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断当前设备系统是否是8.0以上，8.0新增用户授权</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">Double</span>(<span class="type">UIDevice</span>.currentDevice().systemVersion) &gt;= <span class="number">8.0</span> &#123;</span><br><span class="line">            <span class="comment">//            manager.requestAlwaysAuthorization()</span></span><br><span class="line">            <span class="comment">//当用户前台使用时才会授权，需要在info.plist文件中进行配置描述信息</span></span><br><span class="line">            manager.requestWhenInUseAuthorization()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9.0新增临时后台定位，必须要配置plist文件，不配置会崩溃</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">Double</span>(<span class="type">UIDevice</span>.currentDevice().systemVersion) &gt;= <span class="number">9.0</span> &#123;</span><br><span class="line">            manager.allowsBackgroundLocationUpdates = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 位置过滤 单位:米  100 表示当用户位置更新了100米后调用对应的代理方法</span></span><br><span class="line">        manager.distanceFilter = <span class="number">100</span></span><br><span class="line">        <span class="comment">// 期望精度 单位:米  100 :表示系统默认将100米看做同一个范围</span></span><br><span class="line">        manager.desiredAccuracy = <span class="number">100</span></span><br><span class="line">        manager.delegate = <span class="keyword">self</span></span><br><span class="line">        <span class="comment">// 开启定位</span></span><br><span class="line">        manager.startUpdatingLocation()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较两点之间的直线距离</span></span><br><span class="line">        compare()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">compare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">let</span> localtion = <span class="type">CLLocation</span>(latitude: <span class="number">30</span>, longitude: <span class="number">120</span>)</span><br><span class="line">        <span class="keyword">let</span> localtion1 = <span class="type">CLLocation</span>(latitude: <span class="number">39</span>, longitude: <span class="number">115</span>)</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">distance</span> = localtion.distanceFromLocation(localtion1)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">distance</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当定位到用户位置时更新，会一直定位，耗电</span></span><br><span class="line"><span class="comment">// locations:装着CLLocation对象的数组，一个CLLocation代表一个位置</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">CLLocationManagerDelegate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(manager: CLLocationManager, didUpdateLocations locations: [CLLocation])</span></span> &#123;</span><br><span class="line">        <span class="comment">// 停止定位  --省电，相当于只定位一次</span></span><br><span class="line">        <span class="comment">//    [manager stopUpdatingLocation];</span></span><br><span class="line">        <span class="built_in">print</span>(locations)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置信息：在Info.plist文件中添加如下配置<ul>
<li>NSLocationAlwaysUsageDescription，value值可以为空，manager.requestAlwaysAuthorization()时设置这个</li>
<li>NSLocationWhenInUseUsageDescription，value值可以为空，manager.requestWhenInUseAuthorization()时设置这个</li>
<li>Required background modes，是个数组，manager.allowsBackgroundLocationUpdates = true时设置这个</li>
</ul>
</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/%E5%9C%B0%E5%9B%BEplist%E9%85%8D%E7%BD%AE.png" alt=""></p>
<h2 id="地理编码"><a href="#地理编码" class="headerlink" title="地理编码"></a>地理编码</h2><ul>
<li>地理编码是通过输入地址来得到地址的经纬度，比如通过“北京大学”可以得到北京大学的经纬度</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="comment">//先要导入CoreLocation类库</span></span><br><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> addressLabel: <span class="type">UILabel</span>!<span class="comment">//详细地址的label</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> longitiduLabel: <span class="type">UILabel</span>!<span class="comment">//算出的纬度的label</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> latitudeLabel: <span class="type">UILabel</span>!<span class="comment">//算出的经度的label</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> inputLabel: <span class="type">UITextField</span>!<span class="comment">//输入的地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">btnClick</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//初始化CLGeocoder对象，地理编码与反地理编码都通过这个对象实现</span></span><br><span class="line">        <span class="keyword">let</span> geocoder = <span class="type">CLGeocoder</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这个方法通过输入一个地址来得到经纬度</span></span><br><span class="line">        geocoder.geocodeAddressString(inputLabel.text!) &#123; (clPlacemark, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error != <span class="literal">nil</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//算出的详细地址、经纬度等都在CLPlacemark中，之所以是个数组是因为输入的地址可能有很多地方都存在同名的地址</span></span><br><span class="line">            <span class="keyword">for</span> placeMark <span class="keyword">in</span> clPlacemark!&#123;</span><br><span class="line">                <span class="built_in">print</span>(placeMark.name)</span><br><span class="line">                <span class="keyword">self</span>.addressLabel.text = placeMark.name</span><br><span class="line">                <span class="keyword">self</span>.latitudeLabel.text = <span class="string">"\(placeMark.location?.coordinate.latitude ?? 0)"</span></span><br><span class="line">                <span class="keyword">self</span>.longitiduLabel.text = <span class="string">"\(placeMark.location?.coordinate.longitude ?? 0)"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>界面如下图所示</li>
<li>图中是输入东京得到的“江苏省南京市江宁区东京”的经纬度</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/%E5%9C%B0%E7%90%86%E7%BC%96%E7%A0%81.png" alt=""></p>
<h2 id="反地理编码"><a href="#反地理编码" class="headerlink" title="反地理编码"></a>反地理编码</h2><ul>
<li>地理编码是通过输入经纬度来得到详细地址</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RevViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> longitiduTextField: <span class="type">UITextField</span>!</span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> latitudeTextField: <span class="type">UITextField</span>!</span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> addressLabel: <span class="type">UILabel</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">btnClick</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> geocoder = <span class="type">CLGeocoder</span>()</span><br><span class="line">        <span class="keyword">let</span> location = <span class="type">CLLocation</span>(latitude: <span class="type">Double</span>(latitudeTextField.text!)!, longitude: <span class="type">Double</span>(longitiduTextField.text!)!)</span><br><span class="line">        </span><br><span class="line">        geocoder.reverseGeocodeLocation(location) &#123; (clPlacemark, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error != <span class="literal">nil</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">self</span>.addressLabel.text = clPlacemark![<span class="number">0</span>].name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>界面如下图所示</li>
<li>图中是输入经度为110纬度为40的详细地址</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/%E5%8F%8D%E5%9C%B0%E7%90%86%E7%BC%96%E7%A0%81.png" alt=""></p>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><h3 id="调用系统地图导航"><a href="#调用系统地图导航" class="headerlink" title="调用系统地图导航"></a>调用系统地图导航</h3><ul>
<li>调用系统的地图来导航不需要MapKitView控件，也不需要请求授权</li>
<li>先写MKMapItem.openMapsWithItems([currentMapItem,mapItem], launchOptions: options)这个方法，根据参数推导其他代码</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> inputTextField: <span class="type">UITextField</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">beginBtnClick</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> geocoder = <span class="type">CLGeocoder</span>()</span><br><span class="line">        <span class="comment">//地理编码获得终点的地标</span></span><br><span class="line">        geocoder.geocodeAddressString(inputTextField.text!) &#123; (clPlacemarks, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error != <span class="literal">nil</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取起点的item</span></span><br><span class="line">            <span class="keyword">let</span> currentMapItem = <span class="type">MKMapItem</span>.mapItemForCurrentLocation()</span><br><span class="line">            <span class="keyword">let</span> mkPlacemark = <span class="type">MKPlacemark</span>(placemark: (clPlacemarks?.first)!)</span><br><span class="line">            <span class="comment">// 获取终点的item</span></span><br><span class="line">            <span class="keyword">let</span> mapItem = <span class="type">MKMapItem</span>(placemark: mkPlacemark)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span><br><span class="line">             MKLaunchOptionsDirectionsModeKey</span><br><span class="line">             MKLaunchOptionsMapTypeKey</span><br><span class="line">             MKLaunchOptionsShowsTrafficKey</span><br><span class="line">             */</span></span><br><span class="line">            <span class="keyword">var</span> options:[<span class="type">String</span>: <span class="type">AnyObject</span>] = <span class="type">Dictionary</span>()</span><br><span class="line">            <span class="comment">/*</span><br><span class="line">             MKLaunchOptionsDirectionsModeDriving 驾车</span><br><span class="line">             MKLaunchOptionsDirectionsModeWalking 步行</span><br><span class="line">             MKLaunchOptionsDirectionsModeTransit 公共交通</span><br><span class="line">             */</span></span><br><span class="line">            <span class="comment">// 导航模式</span></span><br><span class="line">            options[<span class="type">MKLaunchOptionsDirectionsModeKey</span>] = <span class="type">MKLaunchOptionsDirectionsModeDriving</span></span><br><span class="line">            <span class="comment">// 地图类型</span></span><br><span class="line">            options[<span class="type">MKLaunchOptionsMapTypeKey</span>] = <span class="type">MKMapType</span>.<span class="type">Standard</span> <span class="keyword">as</span>? <span class="type">AnyObject</span>;</span><br><span class="line">            <span class="comment">// 是否显示交通状况</span></span><br><span class="line">            options[<span class="type">MKLaunchOptionsShowsTrafficKey</span>] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 打开系统自带的地图去导航，先写这一句，根据参数推导上面的代码</span></span><br><span class="line">            <span class="type">MKMapItem</span>.openMapsWithItems([currentMapItem,mapItem], launchOptions: options)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="导航在自己的App上画线"><a href="#导航在自己的App上画线" class="headerlink" title="导航在自己的App上画线"></a>导航在自己的App上画线</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> manager: <span class="type">CLLocationManager</span> = <span class="type">CLLocationManager</span>()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> addressTextField: <span class="type">UITextField</span>!</span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mapView: <span class="type">MKMapView</span>!</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="comment">// 创建对象并请求授权</span></span><br><span class="line">        manager.requestWhenInUseAuthorization()</span><br><span class="line">        mapView.delegate = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">drawLineBtnClick</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//地理编码</span></span><br><span class="line">        <span class="keyword">let</span> geocoder = <span class="type">CLGeocoder</span>()</span><br><span class="line">        geocoder.geocodeAddressString(addressTextField.text ?? <span class="string">""</span>) &#123; (clPlacemarks, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error != <span class="literal">nil</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> mkPlacemark = <span class="type">MKPlacemark</span>(placemark: clPlacemarks![<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">let</span> currentMapItem = <span class="type">MKMapItem</span>.mapItemForCurrentLocation()</span><br><span class="line">            <span class="keyword">let</span> mapItem = <span class="type">MKMapItem</span>(placemark: mkPlacemark)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> request = <span class="type">MKDirectionsRequest</span>()</span><br><span class="line">            <span class="comment">// 设置请求的起点</span></span><br><span class="line">            request.source = currentMapItem</span><br><span class="line">            <span class="comment">// 设置请求的终点</span></span><br><span class="line">            request.destination = mapItem</span><br><span class="line">            <span class="comment">// 创建方向对象</span></span><br><span class="line">            <span class="keyword">let</span> directs = <span class="type">MKDirections</span>(request: request)</span><br><span class="line">            <span class="comment">// 请求数据</span></span><br><span class="line">            directs.calculateDirectionsWithCompletionHandler &#123; (response, error) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> error != <span class="literal">nil</span>&#123;</span><br><span class="line">                    <span class="built_in">print</span>(error)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取数据  polyline:折线</span></span><br><span class="line">                <span class="keyword">for</span> route <span class="keyword">in</span> (response?.routes)!&#123;</span><br><span class="line">                    <span class="comment">// 获取折线</span></span><br><span class="line">                    <span class="keyword">let</span> polyLine = route.polyline</span><br><span class="line">                    <span class="comment">// 添加到地图上  polyline必须要在下面的代理方法中设置渲染颜色</span></span><br><span class="line">                    <span class="comment">//默认是没颜色的，在地图上默认不显示</span></span><br><span class="line">                    <span class="keyword">self</span>.mapView.addOverlay(polyLine)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当有覆盖物添加到地图上时调用</span></span><br><span class="line"><span class="comment">//overlay :添加的覆盖物</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">MKMapViewDelegate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(mapView: MKMapView, rendererForOverlay overlay: MKOverlay)</span></span> -&gt; <span class="type">MKOverlayRenderer</span> &#123;</span><br><span class="line">        <span class="comment">// 创建渲染对象</span></span><br><span class="line">        <span class="keyword">let</span> render = <span class="type">MKPolylineRenderer</span>(overlay: overlay)</span><br><span class="line">        render.strokeColor = <span class="type">UIColor</span>.greenColor()</span><br><span class="line">        <span class="keyword">return</span> render</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：polyLine折线是默认不带颜色的，不设置颜色在地图上不会显示，需要在代理方法中设置渲染颜色</li>
</ul>
<h2 id="仿iphone自带地图"><a href="#仿iphone自带地图" class="headerlink" title="仿iphone自带地图"></a>仿iphone自带地图</h2><h3 id="实现定位功能"><a href="#实现定位功能" class="headerlink" title="实现定位功能"></a>实现定位功能</h3><ul>
<li>打开App就自动定位</li>
<li>点击定位按钮，可以回到之前定位的位置</li>
<li>点击放大，可以放大地图</li>
<li>点击缩小，可以缩小地图</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ChangeDeltaType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Bigger</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Smaller</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mapView: <span class="type">MKMapView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> manager: <span class="type">CLLocationManager</span> = <span class="type">CLLocationManager</span>()</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="comment">//获取授权</span></span><br><span class="line">        manager.requestWhenInUseAuthorization()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         Standard     标准地图</span><br><span class="line">         Satellite    卫星地图</span><br><span class="line">         Hybrid       鸟瞰地图（标准加卫星混合）</span><br><span class="line">         MKMapTypeSatelliteFlyover  iOS9新出的</span><br><span class="line">         MKMapTypeHybridFlyover   iOS9新出的</span><br><span class="line">         */</span></span><br><span class="line">        <span class="comment">//设置地图类型</span></span><br><span class="line">        mapView.mapType = .<span class="type">Standard</span></span><br><span class="line">        <span class="comment">// 实时的交通情况  iOS9新增方法</span></span><br><span class="line">        mapView.showsTraffic = <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 用户跟踪模式</span></span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         None  无</span><br><span class="line">         Follow 跟踪位置</span><br><span class="line">         FollowWithHeading 跟踪位置并跟踪方向</span><br><span class="line">         */</span></span><br><span class="line">        mapView.userTrackingMode = .<span class="type">Follow</span></span><br><span class="line">        mapView.delegate = <span class="keyword">self</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 回到定位的按钮点击事件</span></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">backToCurrentLocation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//        self.mapView.centerCoordinate = self.mapView.userLocation.location?.coordinate</span></span><br><span class="line">        <span class="comment">// 区域 region --两个结构体 center span</span></span><br><span class="line">        <span class="comment">// center 经度和纬度</span></span><br><span class="line">        <span class="comment">// span   经度跨度和纬度跨度</span></span><br><span class="line">        <span class="comment">// 当前区域的中心点经纬度</span></span><br><span class="line">        <span class="keyword">let</span> center = <span class="keyword">self</span>.mapView.userLocation.location?.coordinate</span><br><span class="line">        <span class="comment">// 当前区域的经纬度跨度   </span></span><br><span class="line">        <span class="comment">// 0.021251,0.016093是第一次打开地图定位完成后的跨度，通过最下边的regionDidChangeAnimated方法打印得出</span></span><br><span class="line">        <span class="keyword">let</span> span = <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">0.021251</span>, longitudeDelta: <span class="number">0.016093</span>)</span><br><span class="line">        <span class="comment">// 确定区域</span></span><br><span class="line">        <span class="keyword">let</span> region = <span class="type">MKCoordinateRegion</span>(center: center!, span: span)</span><br><span class="line">        <span class="comment">//            self.mapView.region = region;</span></span><br><span class="line">        <span class="comment">// 加入系统动画</span></span><br><span class="line">        <span class="keyword">self</span>.mapView.setRegion(region, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 放大按钮的点击事件</span></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">biggerMap</span><span class="params">()</span></span> &#123;</span><br><span class="line">        changeDelta(.<span class="type">Bigger</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缩小按钮的点击事件</span></span><br><span class="line">    <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">smallerMap</span><span class="params">()</span></span> &#123;</span><br><span class="line">        changeDelta(.<span class="type">Smaller</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">changeDelta</span><span class="params">(type:ChangeDeltaType)</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> multiply = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">if</span> type == .<span class="type">Bigger</span> &#123;</span><br><span class="line">            multiply = <span class="number">0.5</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            multiply = <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 经纬度跨度</span></span><br><span class="line">        <span class="keyword">let</span> span = <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="keyword">self</span>.mapView.region.span.latitudeDelta * multiply, longitudeDelta: <span class="keyword">self</span>.mapView.region.span.longitudeDelta * multiply)</span><br><span class="line">        <span class="comment">// 确定区域</span></span><br><span class="line">        <span class="keyword">self</span>.mapView.setRegion(<span class="type">MKCoordinateRegionMake</span>(<span class="keyword">self</span>.mapView.centerCoordinate, span), animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">MKMapViewDelegate</span></span>&#123;</span><br><span class="line">    <span class="comment">// 当定位到用户位置时调用</span></span><br><span class="line">    <span class="comment">// userLocation:蓝色光圈</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(mapView: MKMapView, didUpdateUserLocation userLocation: MKUserLocation)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 通过反地理编码获取具体地址</span></span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="keyword">let</span> geocoder = <span class="type">CLGeocoder</span>()</span><br><span class="line">        <span class="comment">// 反地理编码</span></span><br><span class="line">        geocoder.reverseGeocodeLocation(userLocation.location!) &#123; (placemarks, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error != <span class="literal">nil</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 标题--&gt;城市名</span></span><br><span class="line">            userLocation.title = placemarks![<span class="number">0</span>].locality</span><br><span class="line">            <span class="comment">// 子标题--&gt;具体地址</span></span><br><span class="line">            userLocation.subtitle = placemarks![<span class="number">0</span>].name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当区域改变时调用</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(mapView: MKMapView, regionDidChangeAnimated animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"latitudeDalta:\(mapView.region.span.latitudeDelta)"</span> + <span class="string">"---longitudeDelta\(mapView.region.span.longitudeDelta)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加大头针"><a href="#添加大头针" class="headerlink" title="添加大头针"></a>添加大头针</h3><ul>
<li>添加一个MKPinAnnotationView的大头针</li>
<li>MKPointAnnotationView 默认无界面，能显示图片</li>
<li>MKPinAnnotationView默认有界面，不能显示图片，只能显示系统样式</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> mapView: <span class="type">MKMapView</span>!</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> manager:<span class="type">CLLocationManager</span> = <span class="type">CLLocationManager</span>()</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="comment">// 请求用户授权</span></span><br><span class="line">        manager.requestWhenInUseAuthorization()</span><br><span class="line">        <span class="comment">// 设置用户跟踪模式</span></span><br><span class="line">        <span class="keyword">self</span>.mapView.userTrackingMode = .<span class="type">Follow</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> annotation = <span class="type">MKPointAnnotation</span>()</span><br><span class="line">        annotation.coordinate = <span class="type">CLLocationCoordinate2DMake</span>(<span class="number">39</span>, <span class="number">116</span>)</span><br><span class="line">        annotation.title = <span class="string">"我是标题"</span></span><br><span class="line">        annotation.subtitle = <span class="string">"我是子标题"</span></span><br><span class="line">        <span class="keyword">self</span>.mapView.addAnnotation(annotation)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置代理</span></span><br><span class="line">        <span class="keyword">self</span>.mapView.delegate = <span class="keyword">self</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户点击的位置</span></span><br><span class="line">        <span class="keyword">let</span> point = (touches <span class="keyword">as</span> <span class="type">NSSet</span>).anyObject()?.locationInView(<span class="keyword">self</span>.mapView)</span><br><span class="line">        <span class="comment">// 转换位置为经纬度</span></span><br><span class="line">        <span class="keyword">let</span> coordinate = <span class="keyword">self</span>.mapView.convertPoint(point!, toCoordinateFromView: <span class="keyword">self</span>.mapView)</span><br><span class="line">         <span class="comment">// 反地理编码</span></span><br><span class="line">        <span class="keyword">let</span> geocoder = <span class="type">CLGeocoder</span>()</span><br><span class="line">        <span class="keyword">let</span> location = <span class="type">CLLocation</span>(latitude: coordinate.latitude, longitude: coordinate.longitude)</span><br><span class="line">        geocoder .reverseGeocodeLocation(location) &#123; (placemarks, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error != <span class="literal">nil</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建大头针</span></span><br><span class="line">            <span class="keyword">let</span> annotation = <span class="type">MKPointAnnotation</span>()</span><br><span class="line">            annotation.coordinate = coordinate</span><br><span class="line">            annotation.title = placemarks?.first?.locality</span><br><span class="line">            annotation.subtitle = placemarks?.first?.name</span><br><span class="line">            <span class="keyword">self</span>.mapView.addAnnotation(annotation)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MARK: 代理方法</span></span><br><span class="line"><span class="comment">// 当添加大头针时调用</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">MKMapViewDelegate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapView</span><span class="params">(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation)</span></span> -&gt; <span class="type">MKAnnotationView</span>? &#123;</span><br><span class="line"><span class="comment">//        print(annotation)</span></span><br><span class="line">		<span class="comment">//定位时的原点也是一个大头针，当是定位的原点的大头针时，返回原本的样式</span></span><br><span class="line">        <span class="keyword">if</span> annotation.isKindOfClass(<span class="type">MKUserLocation</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="comment">// return nil 代表大头针的样式由系统控制</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if ([annotation isKindOfClass:[MKUserLocation class]]) &#123;</span></span><br><span class="line"><span class="comment">//            return nil;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        static NSString *ID = @"annotation";</span></span><br><span class="line">        <span class="comment">// 从缓存池取</span></span><br><span class="line">        <span class="keyword">var</span> annotationView = mapView.dequeueReusableAnnotationViewWithIdentifier(<span class="string">"annotation"</span>) <span class="keyword">as</span>? <span class="type">MKPinAnnotationView</span></span><br><span class="line">        <span class="keyword">if</span> annotationView == <span class="literal">nil</span> &#123;</span><br><span class="line">            annotationView = <span class="type">MKPinAnnotationView</span>(annotation: annotation, reuseIdentifier: <span class="string">"annotation"</span>)</span><br><span class="line">            <span class="comment">// 改变大头针颜色 --&gt;iOS9之后的方法</span></span><br><span class="line">            annotationView!.pinTintColor = <span class="type">UIColor</span>.greenColor()</span><br><span class="line">            <span class="comment">// 设定动画</span></span><br><span class="line">            annotationView!.animatesDrop = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 是否显示标题</span></span><br><span class="line">            annotationView!.canShowCallout = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 下面三个属性存在的前提是设置了标题</span></span><br><span class="line">            <span class="comment">// 左视图</span></span><br><span class="line">            annotationView!.leftCalloutAccessoryView = <span class="type">UISwitch</span>()</span><br><span class="line">            <span class="comment">// 右视图</span></span><br><span class="line">            annotationView!.rightCalloutAccessoryView = <span class="type">UIButton</span>(type: .<span class="type">ContactAdd</span>)</span><br><span class="line">            <span class="comment">// 中间视图 会覆盖子标题 iOS9之后的方法</span></span><br><span class="line">            annotationView!.detailCalloutAccessoryView = <span class="type">UISwitch</span>()</span><br><span class="line">            <span class="comment">// MKAnnotationView 默认无界面 能显示图片</span></span><br><span class="line">            <span class="comment">// MKPinAnnotationView默认有界面 不能显示图片</span></span><br><span class="line"><span class="comment">//            annotationView.image = UIImage(named: "美工求图啊！！！")</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> annotationView</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[@IBInspectable与@IBDesignable]]></title>
      <url>http://chaselan.com/blog/2015/10/19/ibinspectableandibdesignable.html</url>
      <content type="html"><![CDATA[<ul>
<li>这两个是xCode6.0的时候推出的两个新的关键词</li>
</ul>
<h2 id="IBInspectable"><a href="#IBInspectable" class="headerlink" title="@IBInspectable"></a>@IBInspectable</h2><ul>
<li>能够给视图添加可视化的属性</li>
<li>其修饰的属性可以在 XIB/SB 右边控制面板显示</li>
<li>可以重写该属性的 get/set 方法做自己的操作</li>
</ul>
<a id="more"></a>
<h2 id="IBDesignable"><a href="#IBDesignable" class="headerlink" title="@IBDesignable"></a>@IBDesignable</h2><ul>
<li>其修饰自定义 View</li>
<li>可以在更改 <code>IBInspectable</code> 修饰的属性的时候动态在 XIB/SB 里面渲染</li>
</ul>
<h2 id="IBInspectable使用方式"><a href="#IBInspectable使用方式" class="headerlink" title="@IBInspectable使用方式"></a>@IBInspectable使用方式</h2><ul>
<li>现在我自定义了一个SearchBar，就是在NavigationBar上的titleView加载了一个xib，xib中是一个textField，如下图所示</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/ibinspectable1.png" alt=""></p>
<ul>
<li>项目需求是做成如下的样式</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/ibinspectable2.png" alt=""></p>
<ul>
<li>我们可以通过如下代码实现</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">searchTxt.layer.cornerRadius = <span class="number">20</span></span><br><span class="line">searchTxt.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">searchTxt.layer.borderWidth = <span class="number">2</span></span><br><span class="line">searchTxt.layer.borderColor = <span class="type">UIColor</span>.orangeColor().<span class="type">CGColor</span></span><br></pre></td></tr></table></figure>
<ul>
<li>但是我们希望在xib右边的控制面板出通过增加属性来实现此功能，要如何实现呢？<br>就要用到<code>@IBInspectable</code>标签了</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要在searchBar的xib的管理类中添加属性</span></span><br><span class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> cornerRadius:<span class="type">CGFloat</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加完cornerRadius属性后，我们在xib的右边控制面板就可以看到cornerRadius属性</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/ibinspectable3.png" alt=""></p>
<ul>
<li>我们可以通过在右边控制面板对cornerRadius设置值来设置圆角，但需要先实现cornerRadius属性的set和get方法</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要在searchBar的xib的管理类中添加属性</span></span><br><span class="line"><span class="meta">@IBInspectable</span> <span class="keyword">var</span> cornerRadius:<span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">set</span>&#123;</span><br><span class="line">            layer.cornerRadius = newValue</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> layer.cornerRadius</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>此时运行程序，有可能会报错，将xCode重启一下就好了（具体什么原因不清楚，可能是xCode抽风了吧，O(∩_∩)O）</li>
<li>我们要向完成需求中的样式，还需要将其他属性都添加进来，为了提高代码的可拓展性，将添加属性的操作封装在UIView的分类中</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> cornerRadius: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> layer.cornerRadius</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            layer.cornerRadius = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//边线可视化属性</span></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> borderWidth: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> layer.borderWidth</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            layer.borderWidth = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> borderColor: <span class="type">UIColor</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="comment">//将 CGColor转换为 UIColor</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">UIColor</span>(<span class="type">CGColor</span>: layer.borderColor!)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            layer.borderColor = newValue.<span class="type">CGColor</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加完成后，我们就可以在xib的右侧控制面板就可以看到这些属性设置了，设置相应的值就可以实现需求中的样式</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/ibinspectable4.png" alt=""></p>
<h2 id="IBDesignable使用方式"><a href="#IBDesignable使用方式" class="headerlink" title="@IBDesignable使用方式"></a>@IBDesignable使用方式</h2><ul>
<li>上面讲了<code>@IBInspectable</code>的使用方式，那么<code>@IBDesignable</code>又如何使用呢？</li>
<li>我们设置了<code>@IBInspectable</code>属性之后，xib中的效果是不会变的，但是加上<code>@IBDesignable</code>，我们可以在xib中及时看到渲染的效果.</li>
<li>注意：<code>@IBDesignable</code>只能对自定义的控件生效</li>
<li>首先我新建了一个继承自TextField的类（NBTextField）来管理我xib中的textField</li>
<li>其次，我将xib中的textField与我新建的类绑定</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/ibinspectable5.png" alt=""></p>
<ul>
<li>最后，在类中中添加@IBDesignable</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="meta">@IBDesignable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NBTextField</span>: <span class="title">UITextField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这样我们设置了textField的相关属性之后，在xib中就可以实时显示出来</li>
</ul>
<p><img src="http://7xte1z.com1.z0.glb.clouddn.com/ibinspectable6.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[仿qq弹出菜单(OC)]]></title>
      <url>http://chaselan.com/blog/2015/09/06/qqpopmenu.html</url>
      <content type="html"><![CDATA[<ul>
<li>仿贴吧的侧滑界面。就是qq之后，消息列表界面右上角的加号按钮的功能。</li>
</ul>
<a id="more"></a>
<ul>
<li>具体功能如下图所示：</li>
</ul>
<p><img src="http://7xte1z.com2.z0.glb.clouddn.com/%E4%BB%BFqq%E5%BC%B9%E5%87%BA%E7%95%8C%E9%9D%A2.gif" alt=""></p>
<ul>
<li>相关代码请前往我的<a href="https://github.com/ChaselAn/ACPop-menu" target="_blank" rel="external">Github仿qq弹出菜单</a>下载。</li>
<li>拓展性不是很好，就没有做成框架，仅仅是个小demo。</li>
</ul>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对RunLoop的理解]]></title>
      <url>http://chaselan.com/blog/2015/08/11/runloop.html</url>
      <content type="html"><![CDATA[<h2 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h2><h3 id="什么是运行循环？"><a href="#什么是运行循环？" class="headerlink" title="什么是运行循环？"></a>什么是运行循环？</h3><ul>
<li>消息循环又叫运行循环.</li>
<li><code>NSRunloop</code>就是消息循环,每一个线程内部都有一个消息循环.</li>
<li>只有主线程的消息循环是默认开启,子线程的消息循环默认不开启.</li>
</ul>
<a id="more"></a>
<h3 id="运行循环的目的"><a href="#运行循环的目的" class="headerlink" title="运行循环的目的"></a>运行循环的目的</h3><ul>
<li>保证程序不退出.</li>
<li>负责处理输入事件.</li>
<li>如果没有事件发生,会让程序进入休眠状态.节省CPU的资源，提高程序的性能。</li>
</ul>
<h3 id="输入事件"><a href="#输入事件" class="headerlink" title="输入事件"></a>输入事件</h3><ul>
<li><code>Runloop</code>接收输入事件来自两种不同的来源 : 输入源<code>input source</code>和定时源<code>timer source</code>.<ul>
<li>input for sources such as mouse and keyboard events from the window system, NSPort objects, and NSConnection objects. An NSRunLoop object also processes NSTimer events.</li>
</ul>
</li>
</ul>
<p><img src="http://7xte1z.com2.z0.glb.clouddn.com/runloop.png" alt=""></p>
<h3 id="为什么要使用RunLoop"><a href="#为什么要使用RunLoop" class="headerlink" title="为什么要使用RunLoop"></a>为什么要使用RunLoop</h3><ul>
<li>一般来说，一个线程一次只能执行一个任务，任务结束之后，线程就会推出。如果我们需要一个机制，让线程能随时处理事件但并不退出，这时候就用到了RunLoop。</li>
<li>大家都知道程序的入口是main函数。如果没有了RunLoop，程序会在main函数执行完的时候就会退出。正是因为有了RunLoop，才能让main函数没有马上退出，保证程序的持续运行。<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">  <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate class]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="消息循环运行的模式"><a href="#消息循环运行的模式" class="headerlink" title="消息循环运行的模式"></a>消息循环运行的模式</h3><ul>
<li>消息循环也是要运行在某一特定的模式上的.<ul>
<li>NSDefaultRunLoopMode：默认的模式，通常主线程的RunLoop是在这个Mode下运行。</li>
<li>UITrackingRunLoopMode：追踪模式，当用户与界面交互的时候在此Mode下运行。</li>
<li>NSRunLoopCommonModes：模式组，内部包含了多种模式，会根据不同的操作，做不同的切换。默认的模式是NSDefaultRunLoopMode。</li>
</ul>
</li>
<li>注意 : 只有输入源的运行模式和消息循环的运行模式保持一致,输入源对应的事件才能被消息循环检测到.</li>
</ul>
<h3 id="RunLoop对象"><a href="#RunLoop对象" class="headerlink" title="RunLoop对象"></a>RunLoop对象</h3><ul>
<li>ios中提供了两个对象来访问和使用<code>Runloop</code><ul>
<li>CFRunLoopRef：CFRunLoopRef是在<code>CoreFoundation</code>框架内的，它提供了纯C函数的API，所有这些API都是线程安全的。</li>
<li>NSRunLoop：NSRunLoop是在<code>Foundation</code>框架内的，是基于CFRunLoopRef的封装，提供了面向对象的API，但是这些API不是线程安全的。</li>
</ul>
</li>
</ul>
<h2 id="RunLoop与线程"><a href="#RunLoop与线程" class="headerlink" title="RunLoop与线程"></a>RunLoop与线程</h2><h3 id="RunLoop与线程的关系"><a href="#RunLoop与线程的关系" class="headerlink" title="RunLoop与线程的关系"></a>RunLoop与线程的关系</h3><ul>
<li>每条线程都有<code>唯一</code>的一个与之对应的RunLoop对象</li>
<li>主线程的RunLoop由系统自动创建</li>
<li>线程刚创建时并没有RunLoop，如果你不主动获取，那它一直都不会有。</li>
<li>RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。</li>
</ul>
<h3 id="获取RunLoop对象"><a href="#获取RunLoop对象" class="headerlink" title="获取RunLoop对象"></a>获取RunLoop对象</h3><ul>
<li><p>Foundation框架中</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">NSRunLoop</span> currentRunLoop]; <span class="comment">// 获得当前线程的RunLoop对象</span></span><br><span class="line">[<span class="built_in">NSRunLoop</span> mainRunLoop]; <span class="comment">// 获得主线程的RunLoop对象</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Core Foundation框架中</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFRunLoopGetCurrent</span>(); <span class="comment">// 获得当前线程的RunLoop对象</span></span><br><span class="line"><span class="built_in">CFRunLoopGetMain</span>(); <span class="comment">// 获得主线程的RunLoop对象</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="RunLoop-主线程"><a href="#RunLoop-主线程" class="headerlink" title="RunLoop-主线程"></a>RunLoop-主线程</h2><ul>
<li>主线程的消息循环是默认开启.</li>
<li>在主线程中使用<code>定时源</code>.即<code>定时器</code>.</li>
<li>步骤 : 将<code>定时源</code>添加到<code>当前线程</code>的消息循环.</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> timerDemo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)timerDemo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建定时器</span></span><br><span class="line">    <span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(fire) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将定时器添加到消息循环</span></span><br><span class="line">    <span class="comment">// currentRunLoop : 获取到当前的消息循环</span></span><br><span class="line">    <span class="comment">// forMode : 当前定时源timer的运行模式</span></span><br><span class="line">    <span class="comment">// NSRunLoopCommonModes : 模式组,里面包含了几种运行模式,kCFRunLoopDefaultMode / UITrackingRunLoopMode</span></span><br><span class="line">    <span class="comment">// 消息循环也是运行在一个模式下面的,默认的模式是kCFRunLoopDefaultMode,只有定时源的运行模式和消息循环的运行模式保持一致,定时源对应的方法才能执行</span></span><br><span class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fire</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"hello %@"</span>,[<span class="built_in">NSRunLoop</span> currentRunLoop].currentMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RunLoop-子线程"><a href="#RunLoop-子线程" class="headerlink" title="RunLoop-子线程"></a>RunLoop-子线程</h2><ul>
<li>子线程的消息循环是默认不开启.</li>
<li>在子线程中使用<code>定时源</code>.即<code>定时器</code>.需要我们<code>手动开启子线程的消息循环</code>.</li>
<li>步骤 : 将<code>定时源</code>添加到<code>当前线程</code>的消息循环.</li>
</ul>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    [self timerDemo];</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> performSelectorInBackground:<span class="keyword">@selector</span>(timerDemo) withObject:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)timerDemo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建定时器(定时源)</span></span><br><span class="line">    <span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">1.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(fire) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前的消息循环</span></span><br><span class="line">    <span class="comment">// currentRunLoop : 当前子线程的消息循环</span></span><br><span class="line">    <span class="comment">// 子线程的消息循环默认是不开启的,需要我们手动开启</span></span><br><span class="line">    <span class="comment">// 子线程中的运行模式和主线程是一样的</span></span><br><span class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动开启子线程的消息循环</span></span><br><span class="line">    <span class="comment">// run : 消息循环不停止的话,后面的代码永远不会被执行的</span></span><br><span class="line">    <span class="comment">// runUntilDate : 消息循环运行到指定的日期之后就自动的停止</span></span><br><span class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] runUntilDate:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">5.0</span>]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// over能够打印出来吗?</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"over"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fire</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SDWebImage框架分析]]></title>
      <url>http://chaselan.com/blog/2015/08/06/sdwebimage.html</url>
      <content type="html"><![CDATA[<h2 id="什么是SDWebImage"><a href="#什么是SDWebImage" class="headerlink" title="什么是SDWebImage"></a>什么是SDWebImage</h2><ul>
<li>SDWebImage是iOS中著名的网络图片处理框架</li>
<li>包含的功能：图片下载、图片缓存、下载进度监听、gif处理等等</li>
<li>用法极其简单，功能十分强大，大大提高了网络图片的处理效率</li>
<li>国内超过90%的iOS项目都有它的影子</li>
<li>框架地址：<a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">https://github.com/rs/SDWebImage</a></li>
</ul>
<a id="more"></a>
<h2 id="关于SDWebImage的常见问题"><a href="#关于SDWebImage的常见问题" class="headerlink" title="关于SDWebImage的常见问题"></a>关于SDWebImage的常见问题</h2><p>1&gt; 图片文件缓存的时间有多长：<code>1周</code></p>
<p><code>_maxCacheAge ＝ kDefaultCacheMaxCacheAge</code></p>
<p>2&gt; SDWebImage 的内存缓存是用什么实现的？</p>
<p><code>NSCache</code></p>
<p>3&gt; SDWebImage 的最大并发数是多少？</p>
<p><code>maxConcurrentDownloads ＝ 6</code></p>
<p>4&gt; SDWebImage 支持动图吗？GIF</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;ImageIO/ImageIO.h&gt;</span></span></span><br><span class="line">[<span class="built_in">UIImage</span> animatedImageWithImages:images duration:duration];</span><br></pre></td></tr></table></figure>
<p>5&gt; SDWebImage是如何区分不同格式的图像的</p>
<ul>
<li>根据图像数据第一个字节来判断的！<ul>
<li>PNG：0x89</li>
<li>JPG：0xFF</li>
<li>GIF：0x47</li>
</ul>
</li>
</ul>
<p>6&gt; SDWebImage 缓存图片的名称是怎么确定的！</p>
<ul>
<li><code>md5</code><ul>
<li>如果单纯使用 文件名保存，重名的几率很高！</li>
<li>使用 MD5 的散列函数！对完整的 URL 进行 md5，结果是一个 32 个字符长度的字符串！</li>
</ul>
</li>
</ul>
<p>7&gt; SDWebImage 的内存警告是如何处理的！</p>
<ul>
<li>利用通知中心观察</li>
<li><code>- UIApplicationDidReceiveMemoryWarningNotification</code> 接收到内存警告的通知<ul>
<li>执行 <code>clearMemory</code> 方法，清理内存缓存！</li>
</ul>
</li>
<li><code>- UIApplicationWillTerminateNotification</code> 接收到应用程序将要终止通知<ul>
<li>执行 <code>cleanDisk</code> 方法，清理磁盘缓存！</li>
</ul>
</li>
<li><code>- UIApplicationDidEnterBackgroundNotification</code> 接收到应用程序进入后台通知<ul>
<li>执行 <code>backgroundCleanDisk</code> 方法，后台清理磁盘！</li>
<li>通过以上通知监听，能够保证缓存文件的大小始终在控制范围之内！</li>
<li><code>clearDisk</code> 清空磁盘缓存，将所有缓存目录中的文件，全部删除！实际工作，将缓存目录直接删除，再次创建一个同名空目录！</li>
</ul>
</li>
</ul>
<h2 id="分析SDWebImage的下载操作"><a href="#分析SDWebImage的下载操作" class="headerlink" title="分析SDWebImage的下载操作"></a>分析SDWebImage的下载操作</h2><p><img src="http://7xte1z.com2.z0.glb.clouddn.com/SDWebImage%E5%88%86%E6%9E%90.png" alt=""></p>
<ul>
<li>以tableView加载图片为例。</li>
<li>首先控制器拿到模型数据，传递给cell（<code>UIImageView</code>在cell中），cell拿到模型取出图片地址（图片的下载地址<code>URLString</code>保存在模型的属性中）。</li>
<li><code>UIImageView</code>只是个视图，只负责展示，不能进行下载。所以<code>UIImageView</code>找了一个单例（图像下载管理器单例）去下载。也就是<code>UIImageView</code>的分类集成了一个图像下载管理器单例，来负责图片的下载和缓存。</li>
<li>但是单例是继承自<code>NSObject</code>的，并没有下载功能。所以单例去找了图像下载操作（操作指的是<code>NSOperation</code>）去下载，相当于单例集成了图像下载操作。真正的下载是在图像下载操作中。</li>
</ul>
<h2 id="SDWebImage为什么这么设计？"><a href="#SDWebImage为什么这么设计？" class="headerlink" title="SDWebImage为什么这么设计？"></a>SDWebImage为什么这么设计？</h2><ul>
<li>为了解耦！</li>
<li>控制器只需要只要UIImageView的存在就行了，只告诉<code>UIImageView</code>一个地址，让它去下载，下载过程控制器并不关心。</li>
<li><code>UIImageView</code>不具备下载功能，所以找了单例去下载，<code>UIImageView</code>仅仅只知道单例的存在，不关心单例如何去下载。<code>UIImageView</code>只需让单例去下载然后把图片传给它就行了，然后展示出来。</li>
<li>但是单例也不能进行下载，它仅仅继承自<code>NSObject</code>，没有下载功能。单例就继承了图像下载操作，将下载的地址告诉图像下载操作。</li>
<li>图像下载操作将图片下载完毕之后，将图片对象回调给单例。单例拿到图片就传给<code>UIImageView</code>，<code>UIImageView</code>拿到图片就展示出来。</li>
</ul>
<h2 id="SDWebImage的常用方法"><a href="#SDWebImage的常用方法" class="headerlink" title="SDWebImage的常用方法"></a>SDWebImage的常用方法</h2><h3 id="下载普通图片"><a href="#下载普通图片" class="headerlink" title="下载普通图片"></a>下载普通图片</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.imageView sd_setImageWithURL:URL placeholderImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"user_default"</span>]];</span><br></pre></td></tr></table></figure>
<ul>
<li>URL：图片的下载地址</li>
<li>placholderImage：占位图（图片因为网络延迟，下载完成之前显示的图片）</li>
<li>此方法是UIImageView的分类方法。根据图片地址下载普通图片，并赋值给UIImageView.image。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[仿贴吧侧滑界面(OC)]]></title>
      <url>http://chaselan.com/blog/2015/07/02/tiebaslide.html</url>
      <content type="html"><![CDATA[<ul>
<li>仿贴吧的侧滑界面。就是进入某个贴吧之后，向左画出来的那个界面。</li>
</ul>
<a id="more"></a>
<ul>
<li>具体功能如下图所示：</li>
</ul>
<p><img src="http://7xte1z.com2.z0.glb.clouddn.com/%E4%BB%BF%E8%B4%B4%E5%90%A7%E4%BE%A7%E6%BB%91.gif" alt=""></p>
<ul>
<li>相关代码请前往我的<a href="https://github.com/ChaselAn/post-bar-slideView" target="_blank" rel="external">Github仿贴吧侧滑</a>下载。</li>
<li>拓展性不是很好，就没有做成框架，仅仅是个小demo。</li>
</ul>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对token的理解]]></title>
      <url>http://chaselan.com/blog/2015/06/28/token.html</url>
      <content type="html"><![CDATA[<p>以用户的登录为例来谈谈我对token的理解。</p>
<h3 id="什么是token？"><a href="#什么是token？" class="headerlink" title="什么是token？"></a>什么是token？</h3><ul>
<li>token其实就是登录令牌，是用来标识用户信息的唯一标识符。不会有两个相同的token值。</li>
<li>可以理解为将用户信息通过算法形成了一个长字符串。</li>
</ul>
<a id="more"></a>
<h3 id="token是什么时候生成的？"><a href="#token是什么时候生成的？" class="headerlink" title="token是什么时候生成的？"></a>token是什么时候生成的？</h3><ul>
<li>用户登录成功之后,在服务器端就会生成一个token值.然后这个token值就会返回给客户端,同时在服务器也会保存这个token值。</li>
<li>客户端获取到服务器的token值之后,会保存在本地(磁盘/沙盒:“永久化”保存)。</li>
<li>服务器通过在判断在服务器端保存的token值来判断用户是否登录成功过。</li>
</ul>
<h3 id="什么时候会用到token？"><a href="#什么时候会用到token？" class="headerlink" title="什么时候会用到token？"></a>什么时候会用到token？</h3><p>如果用户登录成功过之后，也就服务器端已经有token值之后。用户再次通过客户端发送新的网路请求。</p>
<ul>
<li>发送不需要用户信息的请求（比如说非登录状态下的浏览商品），这时服务器不需要判断用户是否登录。不会用到token。</li>
<li>发送需要用户信息的请求(比如说登录之后的购买商品/添加到购物车),服务器需要判断用户是否登录成功过。此时会将token值作为判断用户信息的标准发送给服务器。服务器通过对比token值来确定用户是否需要再次登录。如果token值相同，就不需要再次通过填写用户名和密码再登录一遍。</li>
</ul>
<h3 id="token值什么时候会发生变化？"><a href="#token值什么时候会发生变化？" class="headerlink" title="token值什么时候会发生变化？"></a>token值什么时候会发生变化？</h3><ul>
<li>token值是用户信息的唯一标识符，当用户信息发生改变的时候（比如说修改密码），token值就会发生改变。</li>
<li>token值失效。token值是可以设置有效时间的。<ul>
<li>新闻类或者游戏类的app的token值设置有效时间的很长，为了保留用户/简化登录流程。</li>
<li>银行类或者支付类的token值有效时间会很短，一般在15分钟之内。比如你进入支付类的界面之后，离开了一段时间，再次支付需要重新登录，就是token值失效了。</li>
</ul>
</li>
</ul>
<h3 id="客户端token值与服务器端token值不同"><a href="#客户端token值与服务器端token值不同" class="headerlink" title="客户端token值与服务器端token值不同"></a>客户端token值与服务器端token值不同</h3><p>如果服务器和本地保存的token值不相同。</p>
<ul>
<li>token值不同：需要重新登录，会生成新的token值。</li>
<li>token失效：也需要重新登录。</li>
</ul>
<h3 id="服务器如何判断用户的“唯一性”登录？"><a href="#服务器如何判断用户的“唯一性”登录？" class="headerlink" title="服务器如何判断用户的“唯一性”登录？"></a>服务器如何判断用户的“唯一性”登录？</h3><ul>
<li>如何让用户在一台设备上登录之后，其他设备就不允许登录？当然就是通过token值啦。</li>
<li>设置token值失效。</li>
<li>因为设备号不同，每次在不同设备登录成功之后，都会在服务器生成新的token值，原来的token值就失效了！</li>
</ul>
<h3 id="我们客户端需要做什么事情？"><a href="#我们客户端需要做什么事情？" class="headerlink" title="我们客户端需要做什么事情？"></a>我们客户端需要做什么事情？</h3><p>客户端需要将token值作为一个参数传递给服务器。</p>
<ul>
<li>手动添加token值参数：将token值作为一个谱图参数拼接在url后面/或者封装在请求体中。</li>
<li>自动发送token：将token保存在cookie中,自动发送给服务器。不需要程序员管理.</li>
</ul>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一句代码实现POST/GET请求以及多文件上传(OC)]]></title>
      <url>http://chaselan.com/blog/2015/05/26/postandget.html</url>
      <content type="html"><![CDATA[<p>通过封装代码，实现只用一句代码以下功能。</p>
<ul>
<li>POST请求</li>
<li>GET请求</li>
<li>单文件上传</li>
<li>多文件上传</li>
</ul>
<p>代码请见<a href="https://github.com/ChaselAn/ACNewWorkTool" target="_blank" rel="external">Github–ACNetWorkTool框架</a><br><a id="more"></a></p>
<h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>参数：</p>
<ul>
<li>UrlString:NSString类型，网络接口</li>
<li>paramaters:NSDictionary类型，参数字典</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *urlString = <span class="string">@"http://127.0.0.1/login/login.php"</span>;</span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;<span class="string">@"username"</span>:<span class="string">@"zhangsan"</span>,<span class="string">@"password"</span>:<span class="string">@"zhang"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一句代码的POST请求</span></span><br><span class="line">[[ACNetWorkTool sharedNetworkTool] POSTWithUrlString:urlString paramaters:dict successHandle:^(<span class="keyword">id</span> obj, <span class="built_in">NSURLResponse</span> *response) &#123;</span><br><span class="line">	<span class="comment">//返回数据成功之后进行的操作，obj为返回的数据，如果是JSON数据，见自动转换成数组或字典，如果不是，返回的是二进制数据。</span></span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,obj);</span><br><span class="line">&#125; failHandle:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">	<span class="comment">//返回数据失败之后的操作</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>参数：</p>
<ul>
<li>UrlString:NSString类型，网络接口</li>
<li>paramaters:NSDictionary类型，参数字典</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *urlString = <span class="string">@"http://127.0.0.1/login/login.php"</span>;</span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;<span class="string">@"username"</span>:<span class="string">@"zhangsan"</span>,<span class="string">@"password"</span>:<span class="string">@"zhang"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一句代码的GET请求</span></span><br><span class="line">[[ACNetWorkTool sharedNetworkTool] GETWithUrlString:urlString paramaters:dict successHandle:^(<span class="keyword">id</span> obj, <span class="built_in">NSURLResponse</span> *response) &#123;</span><br><span class="line">	<span class="comment">//返回数据成功之后进行的操作，obj为返回的数据，如果是JSON数据，见自动转换成数组或字典，如果不是，返回的是二进制数据。</span></span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,obj);</span><br><span class="line">&#125; failHandle:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">	<span class="comment">//返回数据失败之后的操作</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><p>参数：</p>
<ul>
<li>UrlString:NSString类型，网络接口</li>
<li>KeyName:NSString类型，服务器接收文件参数的key值</li>
<li>fileName:NSString类型，存储在服务器的文件名称</li>
<li>filePath:NSStirng类型，本地文件的路径</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *urlString = <span class="string">@"http://127.0.0.1/upload/upload.php"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *filePath = <span class="string">@"/Users/ac/Desktop/test.json"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一句代码的单文件上传</span></span><br><span class="line">[[ACNetWorkTool sharedNetworkTool] POSTFileWithUrlString:urlString KeyName:<span class="string">@"userfile"</span> fileName:<span class="string">@"123"</span> filePath:filePath successHandle:^(<span class="keyword">id</span> obj, <span class="built_in">NSURLResponse</span> *response) &#123;</span><br><span class="line">	<span class="comment">//返回数据成功之后进行的操作，obj为返回的数据，如果是JSON数据，见自动转换成数组或字典，如果不是，返回的是二进制数据。</span></span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,obj);</span><br><span class="line">&#125; failHandle:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">	<span class="comment">//返回数据失败之后的操作</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>参数：</p>
<ul>
<li>UrlString:NSString类型，网络接口</li>
<li>FileKey:NSString类型，服务器接收文件参数的key值</li>
<li>fileDict:NSDictionary类型，文件参数字典，&lt; key:文件名称 value:文件路径&gt;</li>
<li>paramaters:NSDictionary类型，普通参数字典，&lt; key:服务器接收普通参数的key值 value:参数内容&gt;</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件地址</span></span><br><span class="line"><span class="built_in">NSString</span> *urlString = <span class="string">@"http://127.0.0.1/upload/upload-m.php"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *filePath1 = <span class="string">@"/Users/ac/Desktop/test1.png"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *filePath2 = <span class="string">@"/Users/ac/Desktop/test2.json"</span>;</span><br><span class="line"><span class="built_in">NSString</span> *filePath3 = <span class="string">@"/Users/ac/Desktop/test3.png"</span>;</span><br><span class="line"><span class="built_in">NSDictionary</span> *fileDict =@&#123;<span class="string">@"file1"</span>:filePath1,<span class="string">@"file2"</span>:filePath2,<span class="string">@"file3"</span>:filePath3&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通参数字典</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *paramaters = @&#123;<span class="string">@"username"</span>:<span class="string">@"zhangsan"</span>,<span class="string">@"password"</span>:<span class="string">@"zhang"</span>,<span class="string">@"gongsi"</span>:<span class="string">@"itcast"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一句代码的多文件上传</span></span><br><span class="line">[[ACNetWorkTool sharedNetworkTool] POSTMoreFileWithUrlString:urlString FileKey:<span class="string">@"userfile[]"</span> fileDict:fileDict paramaters:paramaters successHandle:^(<span class="keyword">id</span> obj, <span class="built_in">NSURLResponse</span> *response)&#123;</span><br><span class="line">	<span class="comment">//返回数据成功之后进行的操作，obj为返回的数据，如果是JSON数据，见自动转换成数组或字典，如果不是，返回的是二进制数据。</span></span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,obj);</span><br><span class="line">&#125; failHandle:^(<span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">	<span class="comment">//返回数据失败之后的操作</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Masonry的简单使用]]></title>
      <url>http://chaselan.com/blog/2015/05/08/masonry.html</url>
      <content type="html"><![CDATA[<h2 id="Masonry概述"><a href="#Masonry概述" class="headerlink" title="Masonry概述"></a>Masonry概述</h2><ul>
<li>Masonry,一个轻量级的布局框架,采用更”优雅”的语法封装自动布局,不需要使用XIB和Storyboard, 并具有高可读性 而且同时支持 iOS 和 Max OS X</li>
<li>Masonry尤其适合习惯纯代码开发的开发者 ,在iPhone6发布后引发的适配潮中 Masonry一定可以助你一臂之力</li>
<li>框架下载地址: <a href="https://github.com/Masonry/Masonry" target="_blank" rel="external">https://github.com/Masonry/Masonry</a></li>
</ul>
<a id="more"></a>
<h2 id="Masonry的基础用法"><a href="#Masonry的基础用法" class="headerlink" title="Masonry的基础用法"></a>Masonry的基础用法</h2><h3 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h3><ul>
<li>Masonry添加约束的最普通的语法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给blueView添加约束，blueView是添加在self.view上的，self.view是blueView的父控件</span></span><br><span class="line">[blueView makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">	<span class="comment">//blueView的左边参照父控件的左边加50</span></span><br><span class="line">	make.left.equalTo(<span class="keyword">self</span>.view.mas_left).offset(<span class="number">50</span>);</span><br><span class="line">	<span class="comment">//blueView的上边边参照父控件的上边减50</span></span><br><span class="line">	make.top.equalTo(<span class="keyword">self</span>.view.mas_top).offset(<span class="number">-50</span>);</span><br><span class="line">	<span class="comment">//blueView的宽参照父控件的宽，并且是父控件宽度的一半</span></span><br><span class="line">	make.width.equalTo(<span class="keyword">self</span>.view.mas_width).multipliedBy(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当要约束得控件属性和参照控件得属性相同时,参照控件得属性可以省略不写</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//blueView的左边参照父控件的左边加50</span></span><br><span class="line">make.left.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">50</span>);</span><br><span class="line"><span class="comment">//blueView的上边边参照父控件的上边减50</span></span><br><span class="line">make.top.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">-50</span>);</span><br><span class="line"><span class="comment">//blueView的宽参照父控件的宽，并且是父控件宽度的一半</span></span><br><span class="line">make.width.equalTo(blueView).multipliedBy(<span class="number">0.5</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>当约束控件属性得offset值一样得时候,属性也可以连写</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//blueView的左边和上边参照父控件的左边和上边加50</span></span><br><span class="line">make.left.top.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Masonry的装箱</li>
<li>装箱是把基本数据类型转换成对象类型，反之叫拆箱</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给blueView上下左右分别设置内边距,上下左右都往里缩50</span></span><br><span class="line"><span class="comment">//UIEdgeInsetMake是结构体，是基本数据类型</span></span><br><span class="line"><span class="comment">//mas_equalTo可以将基本数据类型自动转换为对象类型。</span></span><br><span class="line"><span class="comment">//equalTo默认不带装箱功能</span></span><br><span class="line">make.edges.mas_equalTo(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>));</span><br></pre></td></tr></table></figure>
<h3 id="更新约束"><a href="#更新约束" class="headerlink" title="更新约束"></a>更新约束</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新约束"如果之前已经添加过得约束,在此方法中可以重新添加相同属性得约束,会把之前得约束覆盖"</span></span><br><span class="line"><span class="comment">// 如果在此方法设置了新的约束属性,可能会导致约束冲突"在此方法写得约束都会被添加"</span></span><br><span class="line"><span class="comment">// 如果之前缺少约束,在此方法也可以添加缺少得约束</span></span><br><span class="line">[blueView updateConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">	<span class="comment">//之前已经添加过左边的约束，下面代码就会覆盖掉原来的约束</span></span><br><span class="line">    make.left.equalTo(<span class="keyword">self</span>.view.mas_left).offset(<span class="number">150</span>);</span><br><span class="line">    <span class="comment">//如果之前并不缺少width的约束，加上下面一句就会报约束冲突的错误</span></span><br><span class="line">    <span class="comment">//make.width.equalTo(100);</span></span><br><span class="line">    <span class="comment">//之前缺少高度的约束，下面代码会补上高度的约束</span></span><br><span class="line">    make.top.equalTo(<span class="keyword">self</span>.view).offset(<span class="number">50</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="重建约束"><a href="#重建约束" class="headerlink" title="重建约束"></a>重建约束</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果实现了此方法会把此控件之前添加得所有约束全部删除,如果在此方法内部写了约束,可以重新添加约束</span></span><br><span class="line">[blueView remakeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">	make.edges.mas_equalTo(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">150</span>, <span class="number">50</span>, <span class="number">150</span>, <span class="number">50</span>));</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h2 id="Masonry的偷懒用法"><a href="#Masonry的偷懒用法" class="headerlink" title="Masonry的偷懒用法"></a>Masonry的偷懒用法</h2><ul>
<li>通过引入<code>MAS_SHORTHAND</code>和<code>MAS_SHORTHAND_GLOBALS</code>两个宏，来更方便的使用Masonry</li>
</ul>
<pre><code class="objc"><span class="comment">//define this constant if you want to use Masonry without the 'mas_' prefix</span>
<span class="comment">// 如果你想在使用Masonry框架时省略mas_这个前缀,请定义下面这个宏</span>
<span class="meta">#define MAS_SHORTHAND</span>
<span class="comment">//define this constant if you want to enable auto-boxing for default syntax</span>
<span class="comment">//equalTo 如果想让equalTo也带有装箱功能请定义下面这个宏</span>
<span class="meta">#define MAS_SHORTHAND_GLOBALS</span>
<span class="meta">#warning mark 上面两个宏一定要放在框架得主头文件得上面,它会影响框架得编译</span>
<span class="meta">#import <span class="meta-string">"Masonry.h"</span></span>
</code></pre>
<ul>
<li>引入这两个宏之后，上面的代码中的mas_就都可以省略了</li>
</ul>
<pre><code class="objc"><span class="comment">// 省略mas_的版本</span>
[blueView makeConstraints:^(MASConstraintMaker *make) {
    <span class="comment">//blueView的左边参照父控件的左边加50</span>
    make.left.equalTo(<span class="keyword">self</span>.view.left).offset(<span class="number">50</span>);
    <span class="comment">//blueView的上边边参照父控件的上边减50</span>
    make.top.equalTo(<span class="keyword">self</span>.view.top).offset(<span class="number">-50</span>);
    <span class="comment">//给blueView上下左右分别设置内边距,上下左右都往里缩50</span>
    make.edges.equalTo(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>));
}
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FMDB框架总结]]></title>
      <url>http://chaselan.com/blog/2015/04/30/fmdb.html</url>
      <content type="html"><![CDATA[<h2 id="什么是FMDB？"><a href="#什么是FMDB？" class="headerlink" title="什么是FMDB？"></a>什么是FMDB？</h2><ul>
<li>FMDB是iOS平台的SQLite数据库框架</li>
<li>FMDB以OC的方式封装了SQLite的C语言API</li>
<li>FMDB的下载地址<a href="https://github.com/ccgus/fmdb" target="_blank" rel="external">https://github.com/ccgus/fmdb</a></li>
</ul>
<a id="more"></a>
<h2 id="FMDB的优点"><a href="#FMDB的优点" class="headerlink" title="FMDB的优点"></a>FMDB的优点</h2><ul>
<li>苹果自带的SQLite的API是C语言的，而且特别难用，FMDB是OC的</li>
<li>使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码</li>
<li>对比苹果自带的Core Data框架，更加轻量级和灵活</li>
<li>提供了多线程安全的数据库操作方法，有效地防止数据混乱</li>
</ul>
<h2 id="FMDB的核心类"><a href="#FMDB的核心类" class="headerlink" title="FMDB的核心类"></a>FMDB的核心类</h2><h3 id="FMDatabase"><a href="#FMDatabase" class="headerlink" title="FMDatabase"></a>FMDatabase</h3><ul>
<li>一个FMDatabase对象就代表一个单独的SQLite数据库</li>
<li>用来执行SQL语句</li>
</ul>
<h3 id="FMResultSet"><a href="#FMResultSet" class="headerlink" title="FMResultSet"></a>FMResultSet</h3><ul>
<li>使用FMDatabase执行查询后的结果集</li>
</ul>
<h3 id="FMDatabaseQueue"><a href="#FMDatabaseQueue" class="headerlink" title="FMDatabaseQueue"></a>FMDatabaseQueue</h3><ul>
<li>用于在多线程中执行多个查询或更新，它是线程安全的</li>
</ul>
<h2 id="FMDB的常用方法"><a href="#FMDB的常用方法" class="headerlink" title="FMDB的常用方法"></a>FMDB的常用方法</h2><h3 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h3><ul>
<li><p>通过指定SQLite数据库文件路径来创建FMDatabase对象</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FMDatabase *db = [FMDatabase databaseWithPath:path];</span><br><span class="line"><span class="keyword">if</span> (![db open]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"数据库打开失败！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>path（数据库文件的路径）的三种情况</p>
<ul>
<li>传入具体文件路径：如果数据库文件不存在会自动创建</li>
<li>空字符串<code>@&quot;&quot;</code>：会在临时目录创建一个空的数据库，当<br><code>FMDatabase</code>连接关闭时，数据库文件也被删除</li>
<li><code>nil</code>：会创建一个内存中临时数据库，当<code>FMDatabase</code>连接关闭<br>时，数据库会被销毁</li>
</ul>
</li>
</ul>
<h3 id="执行更新（增删改）"><a href="#执行更新（增删改）" class="headerlink" title="执行更新（增删改）"></a>执行更新（增删改）</h3><ul>
<li>在FMDB中，除查询以外的所有操作，都称为“更新”。比如create、drop、insert、update、delete等</li>
<li>使用executeUpdate:方法执行更新<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db为上方打开数据库方法中创建的FMDatabase对象</span></span><br><span class="line">[db executeUpdate:<span class="string">@"UPDATE t_student SET age = %@ WHERE name = %@;"</span>, @<span class="number">20</span>, <span class="string">@"Jack"</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line">FMResultSet *rs = [db executeQuery:<span class="string">@"SELECT * FROM t_student"</span>];</span><br></pre></td></tr></table></figure>
<ul>
<li>返回的结果集<code>FMResultSet</code>中存放着查询出来的结果。通过遍历结果集来取出相应的字段</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历结果集</span></span><br><span class="line"><span class="keyword">while</span> ([rs next]) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *name = [rs stringForColumn:<span class="string">@"name"</span>];</span><br><span class="line">    <span class="keyword">int</span> age = [rs intForColumn:<span class="string">@"age"</span>];</span><br><span class="line">    <span class="keyword">double</span> score = [rs doubleForColumn:<span class="string">@"score"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AFN的简单使用]]></title>
      <url>http://chaselan.com/blog/2015/04/04/afn.html</url>
      <content type="html"><![CDATA[<h2 id="什么是AFN"><a href="#什么是AFN" class="headerlink" title="什么是AFN"></a>什么是AFN</h2><ul>
<li>AFN全称AFNetworking。</li>
<li>AFN是对NSURLConnection和NSURLSession的封装。</li>
<li>AFN的GitHub下载地址：<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">AFNetworking</a></li>
</ul>
<a id="more"></a>
<h2 id="AFN的常用功能"><a href="#AFN的常用功能" class="headerlink" title="AFN的常用功能"></a>AFN的常用功能</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网络接口</span></span><br><span class="line"><span class="built_in">NSString</span> *urlString = <span class="string">@"http://127.0.0.1/login/login.php"</span>;</span><br><span class="line"><span class="comment">// 要传的的参数</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;<span class="string">@"username"</span>:<span class="string">@"zhangsan"</span>,<span class="string">@"password"</span>:<span class="string">@"zhangsan"</span>&#125;;</span><br><span class="line"><span class="comment">// 实例化网络请求管理类. //不是单例</span></span><br><span class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class="line"><span class="comment">// 更改解析器类型.</span></span><br><span class="line"><span class="comment">// [AFHTTPResponseSerializer serializer] :实例化解析器.</span></span><br><span class="line">manager.responseSerializer = [AFHTTPResponseSerializer serializer];</span><br><span class="line"><span class="comment">// 发送GET请求.</span></span><br><span class="line">[manager GET:urlString parameters:dict progress:^(<span class="built_in">NSProgress</span> * _Nonnull downloadProgress) &#123;</span><br><span class="line">	<span class="comment">//progress:进度;这个参数是 AFN 3.0 之后新增的参数; 对于普通网络请求没有用处!</span></span><br><span class="line">&#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"成功回调: responseObject:%@"</span>,responseObject);</span><br><span class="line">    <span class="built_in">NSData</span> *data = responseObject;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>]);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="comment">// 注意: 这里的失败指的不是网络请求失败!</span></span><br><span class="line">    <span class="comment">// 一般的失败都是 服务器返回的数据类型 跟 解析器类型不对号!</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"失败回调:error:%@"</span>,error);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<ul>
<li>这里的解析器<code>responseSerializer</code>有三类：<ul>
<li>AFJSONResponseSerializer : JSON解析器. 就是默认的解析器类型。如果后台返回的是JSON数据, 那么成功回调的<code>responseObject</code>就是解析之后的OC对象.</li>
<li>AFXMLParserResponseSerializer : XML解析器。如果后台的返回的是XML数据,可以使用这个解析器。但是:这个解析器只会将 XML 数据包装成NSXMLParser的类型,还需要自己手动SAX解析。</li>
<li>AFHTTPResponseSerializer : 万(无)能的解析器类型. 不管什么数据的类型都能够进入成功回调.不解析后台数据!成功回调的<code>responseObject</code>是二进制数据(NSData)。</li>
</ul>
</li>
</ul>
<h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网络接口</span></span><br><span class="line"><span class="built_in">NSString</span> *urlString = <span class="string">@"http://127.0.0.1/login/login.php"</span>;</span><br><span class="line"><span class="comment">// 要传的的参数</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;<span class="string">@"username"</span>:<span class="string">@"zhangsan"</span>,<span class="string">@"password"</span>:<span class="string">@"zhangsan"</span>&#125;;</span><br><span class="line"><span class="comment">// 实例化网络请求管理类. //不是单例</span></span><br><span class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class="line"><span class="comment">// POST 请求</span></span><br><span class="line">[manager POST:urlString parameters:dict progress:^(<span class="built_in">NSProgress</span> * _Nonnull uploadProgress) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">&#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"responseObject:%@"</span>,responseObject);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<ul>
<li>解析器的类型与设置方法与GET方法一致，这里将不再赘述。</li>
</ul>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//网络接口</span></span><br><span class="line"><span class="built_in">NSString</span> *urlString = <span class="string">@"http://127.0.0.1/upload/upload.php"</span>;</span><br><span class="line"><span class="comment">//要上传的文件路径</span></span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"file:///Users/chaselan/Desktop/123.zip"</span>];</span><br><span class="line"><span class="comment">// 文件上传.</span></span><br><span class="line"><span class="comment">// 网络请求管理类</span></span><br><span class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</span><br><span class="line"><span class="comment">// 上传的 POST 请求</span></span><br><span class="line">[manager POST:urlString parameters:<span class="literal">nil</span> constructingBodyWithBlock:^(<span class="keyword">id</span>&lt;AFMultipartFormData&gt;  _Nonnull formData) &#123;</span><br><span class="line">	<span class="comment">// formData :就是请求体格式.</span></span><br><span class="line">	<span class="comment">// 参数:</span></span><br><span class="line">	<span class="comment">// 1. FileURL :需要上传的文件的本地路径.</span></span><br><span class="line">	<span class="comment">// 2. name : 服务器接收文件参数的 key 值.一般由后端人员给出</span></span><br><span class="line">	<span class="comment">// 3. fileName :上传文件在服务器中保存的名称.</span></span><br><span class="line">	<span class="comment">// 4. mimeType :上传文件的类型.可以随便填，尽量填写规范的类型</span></span><br><span class="line">	<span class="comment">// 5. error :NULL</span></span><br><span class="line">	[formData appendPartWithFileURL:url name:<span class="string">@"userfile"</span> fileName:<span class="string">@"789"</span> mimeType:<span class="string">@"ooo"</span> error:<span class="literal">NULL</span>];</span><br><span class="line">&#125; progress:^(<span class="built_in">NSProgress</span> * _Nonnull uploadProgress) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">&#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"responseObject:%@"</span>,responseObject);</span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：AFN不支持多文件上传，但是用AFN可以实现多文件上传。</li>
<li>AFN的多文件上传：一个文件对应一个请求,请求按顺序或者同时发送!</li>
<li>自己封装的多文件上传：一个请求上传多个文件。(自己封装的多文件上传请见之前的博客<a href="http://chaselan.com/2016/04/26/一句代码实现POST:GET请求以及多文件上传\(OC\">一句代码实现POST/GET请求以及多文件上传(OC)</a>))。</li>
</ul>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//网络接口</span></span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://127.0.0.1/dawenjian.zip"</span>];</span><br><span class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</span><br><span class="line"><span class="comment">//设置网络会话配置</span></span><br><span class="line"><span class="built_in">NSURLSessionConfiguration</span> *cgf = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line"><span class="comment">// 1.实例化 AFURLSessionManager 对象.</span></span><br><span class="line">AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:cgf];</span><br><span class="line"><span class="comment">// 2. 实例化 downloadTask</span></span><br><span class="line"><span class="built_in">NSURLSessionDownloadTask</span> *task = [manager downloadTaskWithRequest:request progress:^(<span class="built_in">NSProgress</span> * _Nonnull downloadProgress) &#123;</span><br><span class="line">	<span class="comment">// downloadProgress :直接使用 downloadProgress 不能得到下载进度,需要转换成 float 类型.</span></span><br><span class="line">	<span class="comment">// downloadProgress.fractionCompleted 就是想要的 float(double) 类型.</span></span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"下载进度:%f"</span>,downloadProgress.fractionCompleted);</span><br><span class="line">&#125; destination:^<span class="built_in">NSURL</span> * _Nonnull(<span class="built_in">NSURL</span> * _Nonnull targetPath, <span class="built_in">NSURLResponse</span> * _Nonnull response) &#123;</span><br><span class="line">	<span class="comment">// 用来确定 文件下载完毕之后的保存地址的!</span></span><br><span class="line">    <span class="comment">// targetPath :文件默认的下载路径! 沙盒路径的tmp文件夹中。</span></span><br><span class="line">    <span class="comment">// return之后会自动将tmp中的文件删掉，所以需要在return之前将文件存到自己想要存的路径</span></span><br><span class="line">	<span class="built_in">NSLog</span>(<span class="string">@"targetPath:%@"</span>,targetPath);</span><br><span class="line">	<span class="keyword">return</span> targetPath;</span><br><span class="line">&#125; completionHandler:^(<span class="built_in">NSURLResponse</span> * _Nonnull response, <span class="built_in">NSURL</span> * _Nullable filePath, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"filePath:%@"</span>,filePath);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 3. 开启</span></span><br><span class="line">[task resume];</span><br></pre></td></tr></table></figure>
<p>转载请注明出处！</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[标签]]></title>
      <url>http://chaselan.com/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://chaselan.com/about/index.html</url>
      <content type="html"><![CDATA[<ul>
<li>姓名：安程</li>
<li>年龄：23</li>
<li>学历：大学本科</li>
<li>其他：2015年毕业于青岛大学软件工程专业。山东青岛人，现居北京。现处于求职阶段。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://chaselan.com/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签]]></title>
      <url>http://chaselan.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
